FantasyQuantLab NFL Lineup Optimizer
========================================================
author: Eric Bruce
date: `r Sys.Date()`

2. Why FantasyQuantLab (FQL)?
========================================================

Daily Fantasy Football has grown immensely over the last few years. The objective is to select an NFL lineup that will score the most points under salary and position contraints. The two largest sites are DraftKings and Fanduel. Each features two basic contests; Cash contest with top 50% doubling their entry fee and a Tournament with only the top 20% winning a multiple of their entry fee up to $1 million USD. 

It has proven to be a game of skill. A small percentage of players win the majority of money. Those winning players have an optimal lineup generated by the best algorithmic model. This Data App is a Proof-of-Concept to demontrate the power of FQL.

- FQL can create your optimal lineup so you can win!
- FQL is feature-rich, intuitive and easy to use!

3. FQL Inputs and User Interface (UI)
========================================================

FQL sources data from DraftKings and Fanduel. Data contains NFL Player projections, weekly salaries and historical contest metrics. This data is cleaned and transformed into tidy data contained in R datasets.

FQL offers an intuitive and easy to use UI (Code found in ui.R).

- FQL allows UI input choice of DFS Site (Radio Buttons). **Clicking Submit generates reactive output displayed as a result of server calculations. (Code found in server.R)**
- FQL allows UI input choice of Target Points (Slider). Target Points can change throughout the season due to more experienced players participating. **Clicking Submit generates reactive output displayed as a result of server calculations. (Code found in server.R)**
- FQL offers input choice of Contest, NFL Slate and Optimization Model. Proof of Concept demonstration only. No reactive output displayed as a result of server calculations.

4. FQL Output - Embedded R Code
========================================================

FQL generates reactive ouput that includes an optimal lineup, summary lineup metrics, contest targets and a plot. The FanDuel Optimal Lineup for Dec 13-14 slate is generated with **embedded R code** and shown below. 

```{r, echo=FALSE}
# global.R
library(shiny)
library(ggplot2)
library(Rglpk)



#####################################
# DATA LOAD
#####################################
# Fantasy Football Data is for games played 13-14 Dec 2015
data(galton)
# player data
draftkings = read.csv("./data/dk_players.csv", header = TRUE, sep = ",") 
fanduel = read.csv("./data/fd_players.csv", header = TRUE, sep = ",")
names(fanduel)[1]<-paste("PosID") # Standardize column names
# position analytics
dk_positions = read.csv("./data/dk_position_analytics.csv", header = TRUE, sep = ",") 
fd_positions = read.csv("./data/fd_position_analytics.csv", header = TRUE, sep = ",") 
# contest analytics
dfs_contest_itm = read.csv("./data/dfs_contest_itm.csv", header = TRUE, sep = ",") 

#####################################
# Initialize Model Parameters
#####################################
mu = 140 # Initial User Guess
z_score = 0.674 # 50% confidence interval

#####################################
# FANDUEL optimization
#####################################

# number of variables
num.players = length(fanduel$Name)
# objective:
obj = fanduel$FPPG
# the vars are represented as booleans
var.types = rep("B", num.players)
# the constraints
matrix = rbind(as.numeric(fanduel$Position == "QB"), # num QB
               as.numeric(fanduel$Position == "RB"), # num RB
               as.numeric(fanduel$Position == "WR"), # num WR
               as.numeric(fanduel$Position == "TE"), # num TE
               as.numeric(fanduel$Position == "K"), # num TE
               as.numeric(fanduel$Position == "DST"),# num DEF
               fanduel$Salary)                       # total cost
direction = c("==",
              "==",
              "==",
              "==",
              "==",
              "==",
              "<=")
rhs = c(1, # QB
        2, # RB
        3, # WR
        1, # TE
        1, # K
        1, # DST
        60000) 
# solve model
fd_sol = Rglpk_solve_LP(obj = obj, mat = matrix, dir = direction, rhs = rhs,
                        types = var.types, max = TRUE)

# extract solution
fd_opt = fanduel[fd_sol$solution==1,]
fd_opt_TotSalary = sum(fd_opt$Salary)
fd_opt_TotFPPG = sum(fd_opt$FPPG)

fd_opt[,2:5]

```

The optimal lineup has a projected score of `r round(fd_opt_TotFPPG, 0)` at a salary of `r fd_opt_TotSalary`.


5. FQL - Shiny and Github Links
========================================================

Test drive FQL and review the source code.

- FQL Shiny App [https://ebrucecfa.shinyapps.io/DevDataProd_ProjectAssessment]
- FQL Github [https://github.com/ericandbeethoven/DevDataProd_PeerAssessment]

